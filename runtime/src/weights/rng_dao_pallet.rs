
//! Autogenerated weights for `pallet_rng_dao`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-27, STEPS: `50`, REPEAT: 1000, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `vivek-ThinkPad-E14-Gen-3`, CPU: `AMD Ryzen 5 5500U with Radeon Graphics`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/debug/node-template
// benchmark
// pallet
// --chain=dev
// --execution=wasm
// --wasm-execution=compiled
// --wasm-instantiation-strategy=legacy-instance-reuse
// --pallet=pallet_rng_dao
// --extrinsic=*
// --steps=50
// --repeat=1000
// --log
// error
// --output=runtime/src/weights/rng_dao_pallet.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_rng_dao`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_rng_dao::WeightInfo for WeightInfo<T> {
	// Storage: RngDao CycleCount (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: RngDao Cycles (r:0 w:1)
	fn create_new_rng_cycle() -> Weight {
		// Minimum execution time: 1_340_758 nanoseconds.
		Weight::from_ref_time(1_364_673_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: RngDao Cycles (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: RngDao Generators (r:0 w:1)
	fn send_hash() -> Weight {
		// Minimum execution time: 1_221_538 nanoseconds.
		Weight::from_ref_time(1_346_901_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: RngDao Cycles (r:1 w:1)
	// Storage: RngDao Generators (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn reveal_secret() -> Weight {
		// Minimum execution time: 1_359_566 nanoseconds.
		Weight::from_ref_time(1_420_239_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: RngDao Cycles (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn get_random_number() -> Weight {
		// Minimum execution time: 1_177_038 nanoseconds.
		Weight::from_ref_time(1_271_543_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
